version: '3.8'

services:
  db_dev:
    image: postgres:latest
    container_name: rekrutacja_events_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_DEV}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - nesjs-network
  dev:
    container_name: rekrutacja_events_dev
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:dev
    ports:
      - 5003:5003
    networks:
      - nesjs-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      PORT: ${PORT}
      POSTGRES_HOST: ${POSTGRES_HOST_DEV}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB_DEV}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
    depends_on:
      - db_dev
    restart: unless-stopped
  db_prod:
    image: postgres:latest
    container_name: rekrutacja_events_db_prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_PROD}
    volumes:
      - ./postgres-prod-data:/var/lib/postgresql/data
    networks:
      - nesjs-network
  prod:
    container_name: rekrutacja_events_prod
    build:
      context: .
      target: production
      dockerfile: ./Dockerfile
    command: npm run start:prod
    ports:
      - 5003:5003
    networks:
      - nesjs-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      PORT: ${PORT}
      POSTGRES_HOST: ${POSTGRES_HOST_PROD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB_PROD}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
    depends_on:
      - db_prod
    restart: unless-stopped
  db_test:
    image: postgres:latest
    container_name: rekrutacja_events_db_test
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_TEST}
    networks:
      - nesjs-network
  test:
    container_name: rekrutacja_events_test
    build:
      context: .
      target: test
      dockerfile: ./Dockerfile
    command: npm test -- events.service.spec.ts
    ports:
      - 5003:5003
    networks:
      - nesjs-network
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - db_test
    restart: unless-stopped

networks:
  nesjs-network:
